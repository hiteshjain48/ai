import pandas as pd
import numpy as np
boston = pd.read_csv('HousingData.csv')
boston.dropna(inplace=True)
boston.plot(kind='box', figsize=(15,15))

def remove_outliers(data,col):
    q1 = data[col].quantile(0.25)
    q3 = data[col].quantile(0.75)
    iqr = q3-q1
    low = q1-1.5*iqr
    high = q3+1.5*iqr
    boston[col] = np.clip(data[col],low,high)
    return data

def treat_outliers(data, cols):
    for col in cols:
        data1 = remove_outliers(data,col)
    return data1

list(boston.columns)
treat_outliers(boston, boston.iloc[:,0::])
boston.plot(kind='box', figsize=(15,15))
import tensorflow as tf
from  tensorflow import keras

from  sklearn.preprocessing import StandardScaler
from  sklearn.model_selection import train_test_split

scaler = StandardScaler()
X = boston.drop('MEDV', axis=1)
y = boston['MEDV']

columns = list(X.columns)

X[columns] = scaler.fit_transform(X[columns])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = keras.Sequential([
    keras.layers.Dense(15, input_shape=(13,),activation='relu'),
    keras.layers.Dense(13, activation='relu'),
    keras.layers.Dense(1,activation='relu')
])

model.compile(loss='mean_absolute_error', optimizer='adam', metrics=['mean_absolute_error'])

model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2)